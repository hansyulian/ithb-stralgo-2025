package stralgo.pertemuan3;

/*
* This source file was generated by the Gradle 'init' task
*/

import java.util.LinkedList;
import java.util.Queue;

class BFSShortestPath {
  int NO_PATH = -1;
  // we start from 0 to 5
  int distances[] = { 0, NO_PATH, NO_PATH, NO_PATH, NO_PATH, NO_PATH };
  int[][] adjacencyMatrix = {
      { NO_PATH, 4, 5, NO_PATH, NO_PATH, NO_PATH }, // A
      { 4, NO_PATH, 11, 9, 7, NO_PATH }, // B
      { 5, 11, NO_PATH, NO_PATH, 3, NO_PATH }, // C
      { NO_PATH, 9, NO_PATH, 0, 13, 2 }, // D
      { NO_PATH, 7, 3, 13, NO_PATH, 6 }, // E
      { NO_PATH, NO_PATH, NO_PATH, 2, 6, NO_PATH } // F
  };

  void printSolution() {
    Queue<Integer> bfsQueue = new LinkedList<Integer>();
    bfsQueue.add(0);
    while (!bfsQueue.isEmpty()) {// exhaustive search, try until queue is empty
      int currentVertex = bfsQueue.poll(); // take first position
      for (int i = 0; i < adjacencyMatrix[currentVertex].length; i++) { // loop for every adjacency matrix
        if (adjacencyMatrix[currentVertex][i] != NO_PATH) { // if no path, dont continue
          if (distances[i] == NO_PATH) { // if current position never visited,
            // use current distance + the adjacency to be current shortest
            distances[i] = distances[currentVertex] + adjacencyMatrix[currentVertex][i];
            bfsQueue.add(i); // add the index to be processed again
          } else
          // if current distance is greater than current distance + adjacency
          if (distances[i] > distances[currentVertex] + adjacencyMatrix[currentVertex][i]) {
            // use current as the smallest distance
            distances[i] = distances[currentVertex] + adjacencyMatrix[currentVertex][i];
            // add the index to be processed again, in case more adjacency has smaller
            // distance
            bfsQueue.add(i);
          }

        }
      }
    }
    // print all distances
    for (int i = 0; i < distances.length; i++) {
      System.out.println("Distance from A to " + (char) ('A' + i) + " is " + distances[i]);
    }
  }

  public static void main(String[] args) {
    var bfs = new BFSShortestPath();
    bfs.printSolution();
  }
}
